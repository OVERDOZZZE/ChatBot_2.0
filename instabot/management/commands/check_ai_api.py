from django.core.management.base import BaseCommand
from django.utils import timezone
from decouple import config
from openai import OpenAI
import time


class Command(BaseCommand):
    help = 'Check AI API health and performance'

    def add_arguments(self, parser):
        parser.add_argument(
            '--test-count',
            type=int,
            default=5,
            help='Number of test requests to send (default: 5)',
        )

    def handle(self, *args, **options):
        OPENAI_API_KEY = config('OPENAI_API_KEY')
        test_count = options['test_count']

        client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=OPENAI_API_KEY,
        )

        self.stdout.write(self.style.SUCCESS('=== –ü–†–û–í–ï–†–ö–ê AI API ==='))
        self.stdout.write(f'–û—Ç–ø—Ä–∞–≤–ª—è—é {test_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...\n')

        successful_requests = 0
        total_response_time = 0
        failed_requests = []

        for i in range(test_count):
            self.stdout.write(f'–ó–∞–ø—Ä–æ—Å {i + 1}/{test_count}... ', ending='')

            start_time = time.time()
            try:
                completion = client.chat.completions.create(
                    model="z-ai/glm-4.5-air:free",
                    messages=[
                        {"role": "system", "content": "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"},
                        {"role": "user", "content": f"–¢–µ—Å—Ç {i + 1}"}
                    ],
                    timeout=10,
                    max_tokens=50
                )

                end_time = time.time()
                response_time = end_time - start_time

                if completion.choices[0].message.content:
                    successful_requests += 1
                    total_response_time += response_time
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úì –£—Å–ø–µ—à–Ω–æ ({response_time:.2f}—Å)')
                    )
                else:
                    failed_requests.append(f"–ó–∞–ø—Ä–æ—Å {i + 1}: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    self.stdout.write(self.style.ERROR('‚úó –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'))

            except Exception as e:
                failed_requests.append(f"–ó–∞–ø—Ä–æ—Å {i + 1}: {str(e)}")
                self.stdout.write(self.style.ERROR(f'‚úó –û—à–∏–±–∫–∞: {str(e)[:50]}...'))

        # Results summary
        self.stdout.write('\n' + '=' * 50)
        self.stdout.write(self.style.SUCCESS('–†–ï–ó–£–õ–¨–¢–ê–¢–´:'))
        self.stdout.write(f'–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}/{test_count}')
        self.stdout.write(f'–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_requests / test_count) * 100:.1f}%')

        if successful_requests > 0:
            avg_response_time = total_response_time / successful_requests
            self.stdout.write(f'–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.2f} —Å–µ–∫—É–Ω–¥')

        if failed_requests:
            self.stdout.write('\n–û–®–ò–ë–ö–ò:')
            for error in failed_requests:
                self.stdout.write(self.style.ERROR(f'‚Ä¢ {error}'))

        # Health status
        success_rate = (successful_requests / test_count) * 100
        if success_rate >= 80:
            self.stdout.write(self.style.SUCCESS('\nüü¢ API –†–ê–ë–û–¢–ê–ï–¢ –ù–û–†–ú–ê–õ–¨–ù–û'))
        elif success_rate >= 50:
            self.stdout.write(self.style.WARNING('\nüü° API –†–ê–ë–û–¢–ê–ï–¢ –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò'))
        else:
            self.stdout.write(self.style.ERROR('\nüî¥ API –ù–ï –†–ê–ë–û–¢–ê–ï–¢'))

        # Recommendations
        if success_rate < 80:
            self.stdout.write('\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
            self.stdout.write('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
            self.stdout.write('‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω')
            self.stdout.write('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã OpenRouter')
            self.stdout.write('‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏')